//Component
import { Container, Col, Row, Button, Form, InputGroup} from 'react-bootstrap';
import { useState} from 'react';
import axios from 'axios';
import { getGeocode } from "use-places-autocomplete";

function Filters(props){

    const [locationCandidate, setLocationCandidate] = useState("")
    const [selectedDate, setSelectedDate] = useState("")
    const [selectedCategories, setSelectedCategories] = useState("")
    const [locationBarPlaceHolder, setLocationBarPlaceHolder] = useState("Filter by location")
    
    //Âãï„Åè„Åë„Å©„ÄÅAPIÂÆüË£ÖÊñπÊ≥ïÈÅï„ÅÜ„Åã„ÇÇ„Åó„Çå„Å™„ÅÑ„ÄÇÊ§úÁ¥¢Âæå„Å´URL„ÅåÂ§â„Çè„Çâ„Å™„ÅÑ„Åì„Å®„Å´„Çà„ÇãÂºäÂÆ≥„ÅØ„Å™„ÅÑ„ÅãÊ≥®ÊÑè„Åó„Å¶„Åä„Åè„ÄÇ
    const handleClickFetchFilteredEvent = async () => {
        try {
            const date = selectedDate ? `date=${selectedDate}` : "";
            const category = selectedCategories ? `category=${selectedCategories}` : "";
            // const other = selectedOthers ? `category=${selectedOthers` : "";
            const response = await axios.get(`/api/events?${date}&${category}`)
            const filteredEvents = response.data;
            props.setEvents(filteredEvents);
        } catch(error){
            console.log(error)
        }
    }

    return (
        <Form className="filters-container">
            <Row>
                <Col md={{span:5}}>
                  <Form.Group>
                    <Form.Label>„É≠„Ç±„Éº„Ç∑„Éß„É≥„ÅßÊ§úÁ¥¢</Form.Label>
                    <InputGroup>
                        <Form.Control
                            id = "location-candidate"
                            onChange={(e) => { setLocationCandidate(e.target.value) }}
                            placeholder = {locationBarPlaceHolder}
                            value = {locationCandidate} />
                        <InputGroup.Append>
                            <Button 
                                variant="outline-secondary"
                                onClick = {()=>{
                                    setLocationBarPlaceHolder("ÁèæÂú®Âú∞„ÇíÂèñÂæó‰∏≠...")
                                    setLocationCandidate("ÁèæÂú®Âú∞„ÇíÂèñÂæó‰∏≠...") 
                                    const success = async (position) => {
                                        const latLng = {
                                            lat: position.coords.latitude,
                                            lng: position.coords.longitude,
                                        };
                                        const results = await getGeocode({ location: latLng });
                                        setLocationCandidate(results[1].formatted_address);
                                        setLocationBarPlaceHolder("Filter by location")
                                        };
                                    const error = (error) => {
                                        const errorMessage = {
                                            0: "ÂéüÂõ†‰∏çÊòé„ÅÆ„Ç®„É©„Éº" ,
                                            1: "‰ΩçÁΩÆÊÉÖÂ†±ÂèñÂæó„ÅÆÊú™Ë®±ÂèØ„Å´„Çà„Çã„Ç®„É©„Éº" ,
                                            2: "ÈõªÊ≥¢Áä∂Ê≥Å„Å´„Çà„Çã„Ç®„É©„Éº" ,
                                            3: "„Çø„Ç§„É†„Ç¢„Ç¶„Éà„Ç®„É©„Éº" ,
                                        }
                                        alert(errorMessage[error.code]);
                                    };
                                    navigator.geolocation.getCurrentPosition(success,error)
                                }
                            }
                            >
                                üß≠
                            </Button>
                        </InputGroup.Append>
                    </InputGroup>
                  </Form.Group>
                </Col>
                <Col md={{span:4}}>
                  <Form.Group>
                    <Form.Label>Êó•ÊôÇ„ÅßÊ§úÁ¥¢</Form.Label>
                    <Form.Control 
                        onChange={(e) => {setSelectedDate(e.target.value)}} 
                        type="date" />
                  </Form.Group>
                </Col>
                <Col md={{span:3}}>
                  <Form.Group>
                    <Form.Label>„Ç∏„É£„É≥„É´„ÅßÊ§úÁ¥¢</Form.Label>
                    {/* „Éè„Éº„Éâ„Ç≥„Éº„Éá„Ç£„É≥„Ç∞„ÄÇÊúÄÁµÇÁöÑ„Å´„ÅØevent.category„Å´ÁΩÆ„ÅçÊèõ„Åà„Çã */}
                    {["„Ç§„Éô„É≥„Éà","„Çπ„Éù„ÉÉ„Éà"].map((category) => (
                        <div key={category} className="mb-2">
                        <Form.Check 
                            type="switch" 
                            id={`filter-checkbox-${category}`}
                        >
                            <Form.Check.Input type="checkbox" />
                            <Form.Check.Label 
                                onClick = {() => {
                                    if (!selectedCategories.includes(category)){ //Êó¢„Å´ÈÅ∏Êäû„Åï„Çå„Å¶„ÅÑ„ÅüÂ†¥Âêà
                                        setSelectedCategories([...selectedCategories,category]);
                                    } else if (selectedCategories.includes(category)) { //Êú™ÈÅ∏Êäû„ÅÆÂ†¥Âêà
                                        selectedCategories.splice(selectedCategories.indexOf(category),1);
                                        setSelectedCategories([...selectedCategories])
                                    }
                                }}
                            >
                                {category}
                            </Form.Check.Label>
                        </Form.Check>
                        </div>
                    ))}
                  </Form.Group>
                </Col>
            </Row>
            
            <Container className="search-button-wrapper">    
                <Button 
                    className = "search-button"
                    onClick={()=>{ 
                        props.setSelectedLocation(locationCandidate); // Map„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„Å´Ê∏°„Åó„ÅüAPI„Å®„ÅØÈñ¢‰øÇ„Å™„Åó„Å´auto focus„Åô„Çã
                        handleClickFetchFilteredEvent();„ÄÄ// „Åì„Å£„Å°„ÅßÊ§úÁ¥¢ÁµêÊûú„Å´Âü∫„Å•„ÅÑ„ÅüAPI„ÅåËµ∞„Çã
                    }} 
                    variant="secondary">
                        Ê§úÁ¥¢
                </Button>
            </Container>
            
        </Form>
    )
}

export default Filters;